{
  "rules": {
    "keymap": {
      "$entry": {
        ".indexOn": ["apiKey", "site", "uid"]
      },
      ".read": true,
      ".write": "auth !== null && auth.provider === 'password'"
    },
    "users": {
      "$uid": {
        ".write": true,
        // grants read access to any user who is logged in with an email and password
        ".read": "auth !== null && auth.provider === 'password'"
      }
    },
    "sites": {
      "$site": {
        ".read": "auth !== null && auth.provider === 'password'",
        // allow write from authenticated AND subsequent writes do not alter author or url
        ".write": "auth !== null && (auth.provider === 'password' || auth.provider === 'anonymous') && ( ( !data.exists() || (!newData.child('data').hasChildren(['author']) && !newData.child('data').hasChildren(['url'])) ) ? true : false )",
        "$session" :{
          // can only read your own site's data
          ".read": "auth !== null && auth.uid === data.child('owner').val()",
          // allow write from authenticated AND subsequent writes do not alter author or url
          ".write": "auth !== null && (auth.provider === 'password' || auth.provider === 'anonymous') && ( ( !data.exists() || (!newData.child('data').hasChildren(['author']) && !newData.child('data').hasChildren(['url'])) ) ? true : false )",
          "data" : {
            ".indexOn": ["author", "owner", "time", "url"],
            ".write": "auth !== null && (auth.provider === 'password' || auth.provider === 'anonymous') && ( ( !data.exists() || (!newData.child('data').hasChildren(['author']) && !newData.child('data').hasChildren(['url'])) ) ? true : false )"

          },
          "screenshot" : {
            ".write": "auth !== null && (auth.provider === 'password' || auth.provider === 'anonymous')"
          }
        },
        "owner": {
          // can write if no previous data exist OR if logged in with password
          ".write": "(!data.exists() || !newData.exists()) || (auth !== null && (auth.provider === 'password' || auth.provider === 'anonymous'))",
          ".validate": "newData.val() === auth.uid"
        }
      }
    }
  }
}